<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "Http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="friendMapper">

    <!-- FriendList ResultMap -->
    <resultMap type="FriendList" id="friendListResultMap">
        <result property="friendNo" column="FRIENDNO"/>
        <result property="userName" column="USERNAME"/>
        <result property="friendUserName" column="FRIENDUSERNAME"/>
        <result property="status" column="STATUS"/>
        <result property="requestDate" column="REQUESTDATE"/>
        <result property="acceptDate" column="ACCEPTDATE"/>
        <result property="userNickName" column="USER_NICKNAME"/>
        <result property="friendNickName" column="FRIEND_NICKNAME"/>
    </resultMap>

    <!-- FriendRelation ResultMap -->
    <resultMap type="FriendRelation" id="friendRelationResultMap">
        <result property="relationNo" column="RELATIONNO"/>
        <result property="requesterName" column="REQUESTERNAME"/>
        <result property="receiverName" column="RECEIVERNAME"/>
        <result property="receiverStatus" column="RECEIVERSTATUS"/>
        <result property="requestDate" column="REQUESTDATE"/>
        <result property="responseDate" column="RESPONSEDATE"/>
        <result property="requesterNickName" column="REQUESTER_NICKNAME"/>
        <result property="receiverNickName" column="RECEIVER_NICKNAME"/>
    </resultMap>

    <!-- GameInvite ResultMap -->
	<resultMap type="GameInvite" id="gameInviteResultMap">
	  <result property="inviteNo" column="INVITENO"/>
	  <result property="senderName" column="SENDERNAME"/>
	  <result property="receiverName" column="RECEIVERNAME"/>
	  <result property="roomNo" column="ROOMNO"/>
	  <result property="inviteStatus" column="INVITESTATUS"/>
	  <result property="createDate" column="CREATEDATE"/>
	  <result property="responseDate" column="RESPONSEDATE"/>
	  <result property="senderNickName" column="SENDER_NICKNAME"/>
	  <result property="receiverNickName" column="RECEIVER_NICKNAME"/>
	  <result property="roomName" column="ROOM_NAME"/>
	  <result property="hostUserName" column="HOST_USERNAME"/>
	  <result property="userList" column="USER_LIST"/>
	  <result property="isGaming" column="IS_GAMING"/>
	  <result property="headCount" column="HEAD_COUNT"/>
	  <result property="currentUserCount" column="CURRENT_USER_COUNT"/>
	</resultMap>

    <!-- 친구 목록 조회 -->
    <select id="getFriendList" parameterType="String" resultMap="friendListResultMap">
        SELECT 
            f.FRIENDNO,
            f.USERNAME,
            f.FRIENDUSERNAME,
            f.STATUS,
            f.REQUESTDATE,
            f.ACCEPTDATE,
            u1.NICKNAME AS USER_NICKNAME,
            u2.NICKNAME AS FRIEND_NICKNAME
        FROM FRIEND_LIST f
        LEFT JOIN USER_INFO u1 ON f.USERNAME = u1.USERNAME
        LEFT JOIN USER_INFO u2 ON f.FRIENDUSERNAME = u2.USERNAME
        WHERE f.USERNAME = #{userName}
          AND f.STATUS = 'ACCEPTED'
        ORDER BY f.ACCEPTDATE DESC
    </select>

    <!-- 받은 친구 요청 목록 조회 -->
    <select id="getPendingRequests" parameterType="String" resultMap="friendRelationResultMap">
        SELECT 
            fr.RELATIONNO,
            fr.REQUESTERNAME,
            fr.RECEIVERNAME,
            fr.RECEIVERSTATUS,
            fr.REQUESTDATE,
            fr.RESPONSEDATE,
            u1.NICKNAME AS REQUESTER_NICKNAME,
            u2.NICKNAME AS RECEIVER_NICKNAME
        FROM FRIEND_RELATION fr
        LEFT JOIN USER_INFO u1 ON fr.REQUESTERNAME = u1.USERNAME
        LEFT JOIN USER_INFO u2 ON fr.RECEIVERNAME = u2.USERNAME
        WHERE fr.RECEIVERNAME = #{userName}
          AND fr.RECEIVERSTATUS = 'PENDING'
        ORDER BY fr.REQUESTDATE DESC
    </select>

    <!-- 받은 게임 초대 목록 조회 -->
    <select id="getPendingGameInvites" parameterType="String" resultMap="gameInviteResultMap">
        SELECT 
            gi.INVITENO,
            gi.SENDERNAME,
            gi.RECEIVERNAME,
            gi.ROOMNO,
            gi.INVITESTATUS,
            gi.CREATEDATE,
            gi.RESPONSEDATE,
            u1.NICKNAME AS SENDER_NICKNAME,
            u2.NICKNAME AS RECEIVER_NICKNAME,
            gr.ROOMNAME AS ROOM_NAME,
            gr.MASTER AS HOST_USERNAME,
            gr.USERLIST AS USER_LIST,
            gr.ISGAMING AS IS_GAMING,
            gr.HEADCOUNT AS HEAD_COUNT,
            gr.COUNT AS CURRENT_USER_COUNT
            
        FROM GAME_INVITE gi
        LEFT JOIN USER_INFO u1 ON gi.SENDERNAME = u1.USERNAME
        LEFT JOIN USER_INFO u2 ON gi.RECEIVERNAME = u2.USERNAME
        LEFT JOIN GAME_ROOM gr ON gi.ROOMNO = gr.ROOMNO
        WHERE gi.RECEIVERNAME = #{userName}
          AND gi.INVITESTATUS = 'PENDING'
        ORDER BY gi.CREATEDATE DESC
    </select>

    <!-- 사용자 검색 (아이디 또는 닉네임으로) -->
    <select id="searchUser" parameterType="String" resultType="Member">
        SELECT USERNAME, NICKNAME, EMAIL, STATUS
        FROM USER_INFO
        WHERE (USERNAME = #{searchKeyword} OR NICKNAME = #{searchKeyword})
          AND STATUS = 'Y'
    </select>

    <!-- 친구 요청 보내기 -->
    <insert id="sendFriendRequest" parameterType="FriendRelation">
        INSERT INTO FRIEND_RELATION (
            RELATIONNO,
            REQUESTERNAME,
            RECEIVERNAME,
            RECEIVERSTATUS,
            REQUESTDATE
        ) VALUES (
            SEQ_RELATIONNO.NEXTVAL,
            #{requesterName},
            #{receiverName},
            #{receiverStatus},
            SYSDATE
        )
    </insert>

    <!-- 친구 요청 수락 -->
    <update id="acceptFriendRequest" parameterType="map">
        UPDATE FRIEND_RELATION 
        SET RECEIVERSTATUS = 'ACCEPTED',
            RESPONSEDATE = SYSDATE
        WHERE RELATIONNO = #{relationNo}
          AND RECEIVERNAME = #{userName}
          AND RECEIVERSTATUS = 'PENDING'
    </update>

    <!-- 친구 요청 정보 조회 (ID로) -->
	<select id="getFriendRequestById" parameterType="_int" resultMap="friendRelationResultMap">
		fr.RELATIONNO,
		fr.REQUESTERNAME,
		fr.RECEIVERNAME,
		fr.RECEIVERSTATUS,
		fr.REQUESTDATE,
		fr.RESPONSEDATE,
		u1.NICKNAME AS REQUESTER_NICKNAME,
		u2.NICKNAME AS RECEIVER_NICKNAME
		FROM FRIEND_RELATION fr
		LEFT JOIN USER_INFO u1 ON fr.REQUESTERNAME = u1.USERNAME
		LEFT JOIN USER_INFO u2 ON fr.RECEIVERNAME = u2.USERNAME
		WHERE fr.RELATIONNO = #{relationNo}
	</select>

    <!-- 친구 목록에 추가 -->
    <insert id="addFriendToList" parameterType="FriendList">
        INSERT INTO FRIEND_LIST (
            FRIENDNO,
            USERNAME,
            FRIENDUSERNAME,
            STATUS,
            REQUESTDATE,
            ACCEPTDATE
        ) VALUES (
            SEQ_FRIENDNO.NEXTVAL,
            #{userName},
            #{friendUserName},
            #{status},
            SYSDATE,
            SYSDATE
        )
    </insert>

    <!-- 친구 요청 거절 -->
    <update id="rejectFriendRequest" parameterType="map">
        UPDATE FRIEND_RELATION 
        SET RECEIVERSTATUS = 'REJECTED',
            RESPONSEDATE = SYSDATE
        WHERE RELATIONNO = #{relationNo}
          AND RECEIVERNAME = #{userName}
          AND RECEIVERSTATUS = 'PENDING'
    </update>

    <!-- 친구 삭제 -->
    <delete id="deleteFriend" parameterType="map">
        DELETE FROM FRIEND_LIST
        WHERE USERNAME = #{userName}
          AND FRIENDUSERNAME = #{friendUserName}
          AND STATUS = 'ACCEPTED'
    </delete>

    <!-- 게임 초대 보내기 -->
    <insert id="sendGameInvite" parameterType="GameInvite">
        INSERT INTO GAME_INVITE (
            INVITENO,
            SENDERNAME,
            RECEIVERNAME,
            ROOMNO,
            INVITESTATUS,
            CREATEDATE
        ) VALUES (
            SEQ_INVITENO.NEXTVAL,
            #{senderName},
            #{receiverName},
            #{roomNo},
            #{inviteStatus},
            SYSDATE
        )
    </insert>

    <!-- 게임 초대 응답 -->
    <update id="respondGameInvite" parameterType="map">
        UPDATE GAME_INVITE 
        SET INVITESTATUS = #{status},
            RESPONSEDATE = SYSDATE
        WHERE INVITENO = #{inviteNo}
          AND RECEIVERNAME = #{userName}
          AND INVITESTATUS = 'PENDING'
    </update>
    
    <!-- 친구 여부 확인 -->
    <select id="checkFriendship" parameterType="map" resultType="_int">
        SELECT COUNT(*)
        FROM FRIEND_LIST 
        WHERE ((USERNAME = #{userName1} AND FRIENDUSERNAME = #{userName2})
           OR (USERNAME = #{userName2} AND FRIENDUSERNAME = #{userName1}))
          AND STATUS = 'ACCEPTED'
    </select>

    <!-- 기존 게임 초대 여부 확인 (중복 초대 방지) -->
    <select id="checkExistingGameInvite" parameterType="map" resultType="_int">
        SELECT COUNT(*)
        FROM GAME_INVITE
        WHERE RECEIVERNAME = #{receiverName}
          AND ROOMNO = #{roomNo}
          AND INVITESTATUS = 'PENDING'
    </select>

    <!-- 게임방 검증 (한번에 모든 검증 처리) -->
    <select id="validateGameRoom" parameterType="map" resultType="String">
        SELECT 
            CASE 
                WHEN COUNT(*) = 0 THEN '존재하지 않는 게임방입니다.'
                WHEN MAX(CASE WHEN ISGAMING = 'Y' THEN 1 ELSE 0 END) = 1 THEN '이미 게임이 시작된 방입니다.'
                WHEN MAX(TO_NUMBER(NULLIF(COUNT, ''))) >= MAX(HEADCOUNT) THEN '방이 가득 찼습니다.'
                WHEN MAX(CASE WHEN (MASTER = #{senderUserName} OR USERLIST LIKE '%"' || #{senderUserName} || '"%') THEN 1 ELSE 0 END) = 0 
                     THEN '이 방에 초대할 권한이 없습니다.'
                ELSE NULL
            END AS validation_message
        FROM GAME_ROOM
        WHERE ROOMNO = #{roomNo}
    </select>
    
    
	<!-- 기존 친구 관계/요청 여부 체크 -->
	<select id="checkExistingRelation" parameterType="map" resultType="_int">
	    SELECT COUNT(*)
	    FROM (
	        -- 친구 요청 체크 (양방향)
	        SELECT 1 FROM FRIEND_RELATION 
	        WHERE (REQUESTERNAME = #{userName1} AND RECEIVERNAME = #{userName2})
	           OR (REQUESTERNAME = #{userName2} AND RECEIVERNAME = #{userName1})
	        
	        UNION ALL
	        
	        -- 이미 친구인지 체크 (양방향)
	        SELECT 1 FROM FRIEND_LIST 
	        WHERE (USERNAME = #{userName1} AND FRIENDUSERNAME = #{userName2} AND STATUS = 'ACCEPTED')
	           OR (USERNAME = #{userName2} AND FRIENDUSERNAME = #{userName1} AND STATUS = 'ACCEPTED')
	    )
	</select>
</mapper>