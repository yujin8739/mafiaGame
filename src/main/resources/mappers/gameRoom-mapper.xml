<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "Http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="gameRoomMapper">

	<insert id="insertRoom" parameterType="GameRoom">
	    <selectKey keyProperty="roomNo" resultType="int" order="BEFORE">
	        SELECT SEQ_RNO.NEXTVAL FROM DUAL
	    </selectKey>
	
	    INSERT INTO GAME_ROOM (
	        ROOMNO,
	        ROOMNAME,
	        USERLIST,
	        HEADCOUNT,
	        PASSWORD,
	        TYPE,
	        COUNT
	    ) VALUES (
	        #{roomNo},
	        #{roomName},
	        #{userList},
	        #{headCount},
	        #{password},
	        #{type},
	        #{count}
	    )
	</insert>
    
	<delete id="deleteRoom" parameterType="_int">
	    DELETE FROM GAME_ROOM
	    WHERE ROOMNO = #{roomNo}
	</delete>
	
	<update id="updateUserList">
	    UPDATE GAME_ROOM
	    SET USERLIST = #{userList}
	    WHERE ROOMNO = #{roomNo}
	</update>
	
	<update id="updateRoomMaster">
		UPDATE GAME_ROOM
	    SET MASTER = #{userName}
	    WHERE ROOMNO = #{roomNo}
	</update>
	
	<select id="selectRoom" resultType="GameRoom" parameterType="_int">
	    SELECT *
	    FROM GAME_ROOM
	    WHERE ROOMNO = #{roomNo}
	</select>
	
	<select id="selectAllRooms" resultType="GameRoom">
	    SELECT ROOMNO, ROOMNAME, USERLIST, HEADCOUNT, PASSWORD, TYPE
	    FROM GAME_ROOM
	    ORDER BY ROOMNO DESC
	</select>
	
		<!-- 페이징된 방 목록 조회 -->
	<select id="selectRoomsPaged" resultType="GameRoom" parameterType="map">
	    SELECT * FROM (
	        SELECT ROWNUM AS RN, A.* FROM (
	            SELECT ROOMNO, ROOMNAME, USERLIST, HEADCOUNT, PASSWORD, TYPE, ISGAMING
	            FROM GAME_ROOM
	            ORDER BY ROOMNO DESC
	        ) A
	        WHERE ROWNUM &lt;= #{offset} + #{limit}
	    )
	    WHERE RN > #{offset}
	</select>
	
	<!-- 전체 방 개수 조회 -->
	<select id="selectTotalRoomCount" resultType="int">
	    SELECT COUNT(*)
	    FROM GAME_ROOM
	</select>
	
	<!-- 필터링된 방 목록 조회 (검색 + 페이징) -->
	<select id="selectRoomsFiltered" resultType="GameRoom" parameterType="map">
	    SELECT * FROM (
	        SELECT ROWNUM AS RN, A.* FROM (
	            SELECT ROOMNO, ROOMNAME, USERLIST, HEADCOUNT, PASSWORD, TYPE, ISGAMING
	            FROM GAME_ROOM
	            <where>
	                <if test="type != null">
	                    AND TYPE = #{type}
	                </if>
	                
	                <if test="isGaming != null">
	                    AND ISGAMING = #{isGaming}
	                </if>
	                
	                <if test="keyword != null">
	                    AND UPPER(ROOMNAME) LIKE UPPER('%' || #{keyword} || '%')
	                </if>
	            </where>
	            ORDER BY ROOMNO DESC
	        ) A
	        WHERE ROWNUM &lt;= #{offset} + #{limit}
	    )
	    WHERE RN > #{offset}
	</select>
	
	<!-- 필터링된 방 개수 조회 -->
	<select id="selectFilteredRoomCount" resultType="int" parameterType="map">
	    SELECT COUNT(*)
	    FROM GAME_ROOM
	    <where>
	        <if test="type != null">
	            AND TYPE = #{type}
	        </if>
	        
	        <if test="isGaming != null">
	            AND ISGAMING = #{isGaming}
	        </if>
	        
	        <if test="keyword != null">
	            AND UPPER(ROOMNAME) LIKE UPPER('%' || #{keyword} || '%')
	        </if>
	    </where>
	</select>
	
	
	<update id="updateReadyList">
	    UPDATE GAME_ROOM
	    SET READYUSER = #{userList}
	    WHERE ROOMNO = #{roomNo}
	</update>
	
	<update id="updateStart">
	    UPDATE GAME_ROOM
	    SET READYUSER = '[]',
	    	ISGAMING = 'Y',
	    	JOB = #{updatedJob},  
	    	STARTJOB = #{updatedJob}   
	    WHERE ROOMNO = #{roomNo}
	</update>
	
	<update id="updateStop">
	    UPDATE GAME_ROOM
	    SET READYUSER = '[]',  
	    	ISGAMING = 'N',
	    	JOB = '[]',
	    	DAYNO = 0
	    WHERE ROOMNO = #{roomNo}
	</update>
	
	<select id="getReadyCount" resultType="string">
		SELECT READYUSER
		FROM GAME_ROOM	
		WHERE ROOMNO = #{roomNo}
	</select>
	
	<!-- 게임시작 시 직업 선택 -->
	<select id="selectRandomJobs" parameterType="hashmap" resultType="Job">
        SELECT
            JOBNO, JOBNAME, JOBCLASS, OPTIONAL,
            MATCHCODE, PROBABILITY, JOBVISIBLE
        FROM TABLE(F_GET_RANDOM_JOBS(
            p_mafia_count   => #{mafiaCount},
            p_citizen_count => #{citizenCount},
            p_neutral_count => #{neutralCount}
        ))
    </select>
    
    <select id="getRoomJob" resultType="map" parameterType="int">
	    SELECT USERLIST, JOB, STARTJOB
	    FROM GAME_ROOM
	    WHERE ROOMNO = #{roomNo}
	</select>
	
	<select id="getJobDetail" resultType="Job">
		SELECT JOBNO, JOBNAME, JOBCLASS, OPTIONAL, MATCHCODE, PROBABILITY, JOBVISIBLE
		FROM JOB
		WHERE JOBNO = #{myJob}
	</select>
	
	<select id="getJobDetails" resultType="Job">
	    SELECT JOBNO, JOBNAME, JOBCLASS, OPTIONAL, MATCHCODE, PROBABILITY, JOBVISIBLE
	    FROM JOB
	    WHERE JOBNO IN
	    <foreach collection="jobList" item="job" open="(" separator="," close=")">
	        #{job}
	    </foreach>
	</select>
	
	<select id="getDeathList" resultType="string" parameterType="int">
	   SELECT 
	     CASE
	       WHEN job_number = 0 THEN 'death'
	       ELSE 'alive'
	     END AS status
	   FROM (
	     SELECT 
	       TO_NUMBER(REGEXP_REPLACE(REGEXP_SUBSTR(JOB, '[^,]+', 1, LEVEL), '[^0-9]', '')) AS job_number
	     FROM GAME_ROOM
	     WHERE ROOMNO = #{roomNo}
	     CONNECT BY LEVEL &lt;= REGEXP_COUNT(JOB, ',') + 1
	       AND PRIOR ROOMNO = ROOMNO
	       AND PRIOR DBMS_RANDOM.VALUE IS NOT NULL
	   )
	</select>
	
	<select id="selectKill" resultType="Kill">
		SELECT ROOMNO, DAYNO, VOTE, HEALUSER, KILLUSER
		FROM KILL WHERE ROOMNO = #{roomNo} AND DAYNO = #{dayNo}
	</select>
	
	<update id="updateKill" parameterType="Kill">
		UPDATE KILL 
		SET VOTE = #{vote},
			KILLUSER = #{killUser},
			HEALUSER = #{healUser}
		WHERE ROOMNO = #{roomNo} AND DAYNO = #{dayNo}
	</update>
	
	<update id="updateDayNo">
	    UPDATE GAME_ROOM
	    SET DAYNO = #{dayNo}
	    WHERE ROOMNO = #{roomNo}
	</update>
	
	<insert id="insertKill" parameterType="Kill">
		INSERT INTO KILL 
		(ROOMNO,
		DAYNO,
		VOTE,
		HEALUSER,
		KILLUSER)
		VALUES (
		#{roomNo},
		#{dayNo},
		#{vote},
		#{healUser},
		#{killUser})
	</insert>
	
	<update id="updateJob">
	 	UPDATE GAME_ROOM
	    SET JOB = #{job}
	    WHERE ROOMNO = #{roomNo}
	</update>
	
	<select id="selectRandomHintByJob" parameterType="map" resultType="Hint">
	    SELECT HINTNO, JOBNO, REPLACE(HINT, '!!!!', #{userNick}) AS HINT, PERCENT
	    FROM (
	        SELECT HINTNO, JOBNO, HINT, PERCENT
	        FROM HINT
	        WHERE JOBNO = #{jobNo}
	        ORDER BY DBMS_RANDOM.VALUE * PERCENT DESC
	    )
	    WHERE ROWNUM = 1
    </select>
    
    <insert id="insertRoomHint">
        INSERT INTO ROOM_HINT (ROOMNO, USERNAME, HINT, USERNICK)
        VALUES (#{roomNo}, #{userName}, #{hint}, #{userNick})
    </insert>
    
    
    <!-- 배열로 저장시 아래의 sql문을 이용혹시 몰라 만들어둠 -->
    <select id="selectRandomHints" resultType="Hint" parameterType="map">
		<foreach collection="list" item="item" index="index" open="" close="" separator=" UNION ALL ">
			SELECT HINTNO, JOBNO, REPLACE(HINT, '!!!!', #{item.userNick}) AS HINT, PERCENT
			FROM (
				SELECT HINTNO, JOBNO, HINT, PERCENT
				FROM HINT
				WHERE JOBNO = #{item.jobNo}
				ORDER BY DBMS_RANDOM.VALUE * PERCENT DESC
			)
			WHERE ROWNUM = 1
		</foreach>
	</select>
    
    <insert id="insertRoomHints" parameterType="list">
	    INSERT ALL
	    <foreach collection="list" item="item">
	        INTO ROOM_HINT (ROOMNO, USERNAME, HINT,USERNICK)
	        VALUES (#{item.roomNo}, #{item.userName}, #{item.hintNo}, #{item.userNick})
	    </foreach>
	    SELECT 1 FROM DUAL
	</insert>
	
	<select id="selectRoomHintList" parameterType="int" resultType="RoomHint">
	    SELECT ROOMNO,
	           USERNAME,
	           HINT,
	           USERNICK
	    FROM ROOM_HINT
	    WHERE ROOMNO = #{roomNo}
	</select>
	
	<delete id="deleteAllGameRooms">
		DELETE FROM GAME_ROOM
	</delete>
	
	<insert id="insertGameResult" parameterType="map">
		INSERT INTO GAME_RESULT (RESULTNO, 
								 USERNAME, 
								 JOBNO,
								 TEAM,
								 TEAMRESULT,
								 GAMEDATE)
		VALUES (#{resultNo}, 
				#{userName}, 
				#{jobNo}, 
				#{team}, 
				#{teamResult}, 
				#{date})
	</insert>
	
	<select id="getTotalRecodeCount" resultType="_int">
		SELECT COUNT(*)
		FROM GAME_RESULT
		WHERE USERNAME = #{userName}
	</select>
	
	<select id="getRecodeList" resultType="map">
		SELECT r.RESULTNO, 
		       r.USERNAME, 
		       r.JOBNO, 
		       r.TEAM, 
		       r.TEAMRESULT, 
		       r.GAMEDATE,
		       j.JOBVISIBLE
		FROM GAME_RESULT r, JOB j
		WHERE r.JOBNO = J.JOBNO AND USERNAME = #{userName}
	</select>
</mapper>