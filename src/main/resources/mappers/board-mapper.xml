<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "Http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="boardMapper">
	
	
	<!-- 라운지 게시글 개수 조회용 -->
	<!-- 전체 게시글 조회면 type값 null임 -->
	<!-- 직업 탭만 누르면(직업 전체) type값 lounge_job임 -->
	<select id="listCount" resultType="_int">
		SELECT COUNT(*)
		FROM BOARD B
		JOIN BOARD_TYPE T USING(TYPENO)
		JOIN USER_INFO U ON(B.USERNAME = U.USERNAME)
		<choose>
			<when test="type == null || type ==''">
				WHERE T.TYPENAME LIKE 'lounge%'
			</when>
			<when test="type == 'lounge_job'">
				WHERE T.TYPENAME LIKE 'lounge_job%'
			</when>
			<otherwise>
				WHERE T.TYPENAME LIKE #{type}
			</otherwise>
		</choose>
		<if test="condition != ''">
			<choose>
				<when test="condition == 'title'">
					AND LOWER(B.TITLE) LIKE '%'||LOWER(#{keyword})||'%'
				</when>
				<when test="condition == 'writer'">
					AND LOWER(U.NICKNAME) LIKE '%'||LOWER(#{keyword})||'%'				
				</when>
				<otherwise>
					AND LOWER(B.DETAIL) LIKE '%'||LOWER(#{keyword})||'%'
				</otherwise>
			</choose>
		</if>
		AND B.STATUS = 'Y'
	</select>
	
	
	
	<resultMap type="Board" id="boardDetailResultMap">
		<result property="boardNo" column="BOARDNO"/>
		<result property="userName" column="USERNAME"/>
		<result property="nickName" column="NICKNAME"/>
		<result property="typeNo" column="TYPENO"/>
		<result property="title" column="TITLE"/>
		<result property="detail" column="DETAIL"/>
		<result property="status" column="STATUS"/>
		<result property="createDate" column="CREATEDATE"/>
		<result property="viewCount" column="VIEWCOUNT"/>
		<result property="displayName" column="DISPLAYNAME"/>
		<result property="rankPoint" column="RANKPOINT"/>
		<result property="likeCount" column="LIKECOUNT"/>
		<result property="dislikeCount" column="DISLIKECOUNT"/>
		<collection property="fileList" ofType="BoardFile">
			<result property="fileNo" column="FILENO"/>
			<result property="boardNo" column="BOARDNO"/>
			<result property="type" column="TYPE"/>
			<result property="originName" column="ORIGINNAME"/>
			<result property="changeName" column="CHANGENAME"/>
			<result property="uploadDate" column="UPLOADDATE"/>
			<result property="status" column="FILE_STATUS"/>
		</collection>
		<collection property="replyList" ofType="Reply">
			<result property="replyNo" column="REPLYNO"/>
			<result property="status" column="REPLY_STATUS"/>
		</collection>
	</resultMap>
	
	<resultMap type="Board" id="boardListMap">
		<result property="boardNo" column="BOARDNO"/>
		<result property="nickName" column="NICKNAME"/>
		<result property="title" column="TITLE"/>
		<result property="createDate" column="CREATEDATE"/>
		<result property="viewCount" column="VIEWCOUNT"/>
		<result property="displayName" column="DISPLAYNAME"/>
		<result property="rankPoint" column="RANKPOINT"/>
		<result property="likeCount" column="LIKECOUNT"/>
		
		<result property="replyCount" column="REPLY_COUNT"/>
		<result property="hasFile" column="HAS_FILE"/>
	</resultMap>
	
	<!-- 라운지 게시글 목록 조회용 -->
	<select id="boardList" resultMap="boardListMap">
		SELECT 
		    B.BOARDNO,
		    B.TITLE,
		    B.CREATEDATE,
		    B.VIEWCOUNT,
		    
		    U.RANKPOINT,
		    U.NICKNAME,
		    T.DISPLAYNAME,
		
		    NVL(R.REPLY_COUNT, 0) AS REPLY_COUNT,
		    CASE WHEN F.FILE_EXISTS > 0 THEN 'Y' ELSE 'N' END AS HAS_FILE
		
		FROM BOARD B
		
		JOIN USER_INFO U ON B.USERNAME = U.USERNAME
		
		JOIN BOARD_TYPE T ON B.TYPENO = T.TYPENO
		
		LEFT JOIN (
		    SELECT BOARDNO, COUNT(*) AS REPLY_COUNT
		    FROM REPLY
		    WHERE STATUS = 'Y'
		    GROUP BY BOARDNO
		  ) R ON B.BOARDNO = R.BOARDNO
		
		LEFT JOIN (
		    SELECT BOARDNO, COUNT(*) AS FILE_EXISTS
		    FROM BOARD_FILE
		    WHERE STATUS = 'Y'
		    GROUP BY BOARDNO
		  ) F ON B.BOARDNO = F.BOARDNO
		
		WHERE B.STATUS = 'Y'
		<choose>
			<when test="type == null || type ==''">
				AND T.TYPENAME LIKE 'lounge%'
			</when>
			<when test="type == 'lounge_job'">
				AND T.TYPENAME LIKE 'lounge_job%'
			</when>
			<otherwise>
				AND T.TYPENAME LIKE #{type}
			</otherwise>
		</choose>
		<if test="condition != ''">
			<choose>
				<when test="condition == 'title'">
					AND LOWER(B.TITLE) LIKE '%'||LOWER(#{keyword})||'%'
				</when>
				<when test="condition == 'writer'">
					AND LOWER(U.NICKNAME) LIKE '%'||LOWER(#{keyword})||'%'				
				</when>
				<otherwise>
					AND LOWER(B.DETAIL) LIKE '%'||LOWER(#{keyword})||'%'
				</otherwise>
			</choose>
		</if>
		
		ORDER BY B.CREATEDATE DESC
	</select>
	
	
	
	<!-- 라운지 상위top5 게시글 목록 조회용 -->
	<select id="topLikedList" resultMap="boardListMap">
		SELECT *
		FROM (
		  SELECT 
		    B.BOARDNO,
		    B.TITLE,
		    B.CREATEDATE,
		    B.LIKECOUNT,
		    B.VIEWCOUNT,
		
			U.RANKPOINT,
		    U.NICKNAME,
		    T.DISPLAYNAME,
		
		    NVL(R.REPLY_COUNT, 0) AS REPLY_COUNT,
		    CASE WHEN F.FILE_EXISTS > 0 THEN 'Y' ELSE 'N' END AS HAS_FILE
		
		  FROM BOARD B
		
		  JOIN USER_INFO U ON B.USERNAME = U.USERNAME
		
		  JOIN BOARD_TYPE T ON B.TYPENO = T.TYPENO
		
		  LEFT JOIN (
		    SELECT BOARDNO, COUNT(*) AS REPLY_COUNT
		    FROM REPLY
		    WHERE STATUS = 'Y'
		    GROUP BY BOARDNO
		  ) R ON B.BOARDNO = R.BOARDNO
		
		  LEFT JOIN (
		    SELECT BOARDNO, COUNT(*) AS FILE_EXISTS
		    FROM BOARD_FILE
		    WHERE STATUS = 'Y'
		    GROUP BY BOARDNO
		  ) F ON B.BOARDNO = F.BOARDNO
		
		  WHERE B.STATUS = 'Y'
		  <choose>
			<when test="type == null || type ==''">
				AND T.TYPENAME LIKE 'lounge%'
			</when>
			<when test="type == 'lounge_job'">
				AND T.TYPENAME LIKE 'lounge_job%'
			</when>
			<otherwise>
				AND T.TYPENAME LIKE #{type}
			</otherwise>
		</choose>
		<if test="condition != ''">
			<choose>
				<when test="condition == 'title'">
					AND LOWER(B.TITLE) LIKE '%'||LOWER(#{keyword})||'%'
				</when>
				<when test="condition == 'writer'">
					AND LOWER(U.NICKNAME) LIKE '%'||LOWER(#{keyword})||'%'				
				</when>
				<otherwise>
					AND LOWER(B.DETAIL) LIKE '%'||LOWER(#{keyword})||'%'
				</otherwise>
			</choose>
		</if>
		
		  ORDER BY B.LIKECOUNT DESC, B.CREATEDATE DESC
		
		) 
		WHERE <![CDATA[ROWNUM <= 5]]>
	</select>
	
	<update id="increaseCount">
		UPDATE BOARD
		SET VIEWCOUNT = VIEWCOUNT + 1
		WHERE BOARDNO = #{BOARDNO}
	</update>
	
	<select id="loungeBoardDetail" resultMap="boardDetailResultMap">
		SELECT B.BOARDNO
			  ,B.USERNAME
		      ,U.NICKNAME
		      ,B.DETAIL
		      ,B.TITLE
		      ,B.CREATEDATE
		      ,B.VIEWCOUNT
		      ,B.LIKECOUNT
		      ,B.DISLIKECOUNT
		      ,B.STATUS
		      ,T.DISPLAYNAME
		      ,U.RANKPOINT
		      ,F.FILENO
		      ,F.ORIGINNAME
		      ,F.CHANGENAME
		      ,F.STATUS AS FILE_STATUS
		FROM BOARD B
		LEFT JOIN BOARD_FILE F ON(B.BOARDNO = F.BOARDNO)
		JOIN BOARD_TYPE T USING(TYPENO)
		JOIN USER_INFO U ON(B.USERNAME = U.USERNAME)
		WHERE B.BOARDNO = #{boardNo}
	</select>
	
	<select id="getBoardNo" resultType="_int">
		SELECT SEQ_BNO.NEXTVAL
		FROM DUAL
	</select>
	
	<insert id="writeLoungeBoard"> <!-- 라운지 게시글 등록 -->
		INSERT INTO BOARD(BOARDNO
						 ,USERNAME
						 ,TYPENO
						 ,TITLE
						 ,DETAIL
						 )
					     VALUES(#{boardNo}
				   			   ,#{userName}
					   		   ,#{typeNo}
					   		   ,#{title}
					   		   ,#{detail}
					   		    )
	</insert>
	
	<insert id="insertFile">
		INSERT INTO BOARD_FILE(FILENO
							  ,BOARDNO
							  ,TYPE
							  ,ORIGINNAME
							  ,CHANGENAME)
					VALUES(SEQ_FNO.NEXTVAL
						   ,#{boardNo}
						   ,#{type}
						   ,#{originName}
						   ,#{changeName})
							  
	</insert>
	
	<select id="getFileNo" resultType="_int">
		SELECT SEQ_FNO.NEXTVAL
		FROM DUAL
	</select>
	
	<update id="deleteLoungeBoard">
		UPDATE BOARD
		SET STATUS = 'N'
		WHERE BOARDNO = #{boardNo}
	</update>
	
	<update id="deleteFileOfBoard">
		UPDATE BOARD_FILE
		SET STATUS = 'N'
		WHERE FILENO = (SELECT FILENO
						FROM BOARD
						WHERE BOARDNO = #{boardNo})
	</update>
	
	<update id="updateLoungeBoard">
		UPDATE BOARD
		SET TITLE = #{title}
		   ,DETAIL = #{detail}
		WHERE BOARDNO = #{boardNo}
	</update>
	
	<insert id="uploadFileOfReply">
		INSERT INTO BOARD_FILE(FILENO
							  ,TYPE
							  ,ORIGINNAME
							  ,CHANGENAME)
					VALUES(#{fileNo}
						   ,#{type}
						   ,#{originName}
						   ,#{changeName})
	</insert>
	
	<insert id="uploadReply">
		INSERT INTO REPLY(REPLYNO
						 ,BOARDNO
						 ,FILENO
						 ,REPLYCONTENT
						 ,USERNAME)
					VALUES(SEQ_REPLYNO.NEXTVAL
						  ,#{boardNo}
						  <choose>
						  	<when test="fileNo == 0">
						  	,null
						  	</when>
						  	<otherwise>
						  	,#{fileNo}
						  	</otherwise>
						  </choose>
						  ,#{replyContent}
						  ,#{userName})						 				
	</insert>
	
	<select id="getReplyList" resultType="Reply">
		SELECT R.REPLYNO
			  ,R.REPLYCONTENT
			  ,R.CREATEDATE
			  ,R.USERNAME
			  ,F.FILENO
			  ,F.CHANGENAME
			  ,U.NICKNAME
			  ,U.RANKPOINT
		FROM REPLY R
		JOIN BOARD B ON (R.BOARDNO = B.BOARDNO)
		LEFT JOIN BOARD_FILE F ON (R.FILENO = F.FILENO)
		JOIN USER_INFO U ON (R.USERNAME = U.USERNAME)
		WHERE B.BOARDNO = #{boardNo}
		AND R.STATUS ='Y'
		ORDER BY R.CREATEDATE
	</select>
	
	<select id="selectReply" resultType="Reply">
		SELECT *
		FROM REPLY
		LEFT JOIN BOARD_FILE USING(FILENO)
		WHERE REPLYNO = #{replyNo}
	</select>
	
	<update id="deleteReply">
		UPDATE REPLY
		SET STATUS = 'N'
		WHERE REPLYNO = #{replyNo}
	</update>
	
	<update id="deleteFileOfReply">
		UPDATE BOARD_FILE
		SET BOARD_FILE.STATUS = 'N'
		WHERE FILENO = (SELECT R.FILENO
						FROM REPLY R
						LEFT JOIN BOARD_FILE F ON (R.FILENO = F.FILENO)
						WHERE REPLYNO = #{replyNo}
					   )		
	</update>
	
	<select id="checkBoardLike" resultType="string">
		SELECT TYPE
		FROM BOARD_LIKE
		WHERE USERNAME = #{userName}
		AND BOARDNO = #{boardNo}
	</select>
	
	<delete id="deleteBoardLikeHistory">
		DELETE
		FROM BOARD_LIKE
		WHERE USERNAME = #{userName}
		AND BOARDNO = #{boardNo}
		AND TYPE = #{type}
	</delete>
	
	<update id="increaseBoardLike">
		UPDATE BOARD
		SET 
			LIKECOUNT = LIKECOUNT + CASE WHEN #{type} = 'L' THEN 1 ELSE 0 END,
			DISLIKECOUNT = DISLIKECOUNT + CASE WHEN #{type} = 'L' THEN 0 ELSE 1 END
		WHERE BOARDNO = #{boardNo}
	</update>
	
	<update id="decreaseBoardLike">
		UPDATE BOARD
		SET 
			LIKECOUNT = LIKECOUNT - CASE WHEN #{type} = 'L' THEN 1 ELSE 0 END,
			DISLIKECOUNT = DISLIKECOUNT - CASE WHEN #{type} = 'L' THEN 0 ELSE 1 END
		WHERE BOARDNO = #{boardNo}
	</update>
	
	<insert id="insertBoardLikeHistory">
		INSERT INTO BOARD_LIKE(LIKENO
							  ,BOARDNO
							  ,USERNAME
							  ,TYPE)
			   VALUES(SEQ_B_LIKENO.NEXTVAL
			   	     ,#{boardNo}
			   	     ,#{userName}
			   	     ,#{type}
			   	     ) 
	</insert>
	
	<select id="checkReplyLike" resultType="_int">
		SELECT COUNT(*)
		FROM REPLY_LIKE
		WHERE REPLYNO = #{replyNo}
		AND USERNAME = #{userName}
	</select>
	
	<delete id="deleteReplyLikeHistory">
		DELETE
		FROM REPLY_LIKE
		WHERE REPLYNO = #{replyNo}
		AND USERNAME = #{userName}
	</delete>
	
	<update id="decreaseReplyLike">
		UPDATE REPLY
		SET 
			LIKECOUNT = LIKECOUNT - 1
		WHERE REPLYNO = #{replyNo}
	</update>
	
	<insert id="insertReplyLikeHistory">
		INSERT INTO REPLY_LIKE(LIKENO
							  ,REPLYNO
							  ,USERNAME)
				   VALUES(SEQ_R_LIKENO.NEXTVAL
				   		 ,#{replyNo}
				   		 ,#{userName}
				   		 )
	</insert>
	
	<update id="increaseReplyLike">
		UPDATE REPLY
		SET 
			LIKECOUNT = LIKECOUNT + 1
		WHERE REPLYNO = #{replyNo}
	</update>
	

	
	
	
	
	
	
	
	
	
	
	
	
</mapper>